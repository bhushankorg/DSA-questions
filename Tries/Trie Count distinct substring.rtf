{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 struct TrieNode\{\
    TrieNode* links[26];\
    \
    bool containsLink(char ch)\{\
        return (links[ch - 'a'] != NULL);\
    \}\
    \
    void addLink(char ch)\{\
        links[ch - 'a'] = new TrieNode();\
    \}\
    \
    TrieNode* getLink(char ch)\{\
        return links[ch - 'a'];\
    \}\
    \
    \
\};\
\
int countDistinctSubstrings(string &s)\{\
    //    Write your code here.\
    TrieNode* root = new TrieNode();\
    int count = 0;\
    \
    for(int i = 0; i < s.length(); i++)\{\
        TrieNode* node = root;\
        for(int j = i; j < s.length(); j++)\{\
            char ch = s[j];\
            if(!node->containsLink(ch))\{\
                count++;\
                node->addLink(ch);\
            \}\
            node = node->getLink(ch);\
        \}\
    \}\
    \
    return count + 1;\
\}}