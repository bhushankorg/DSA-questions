{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include<bits/stdc++.h>\
using namespace std;\
\
struct TrieNode\{\
    TrieNode* links[2];\
    \
    bool containsLink(int bit)\{\
        return (links[bit] != NULL);\
    \}\
    \
    void createLink(int bit)\{\
        links[bit] = new TrieNode();\
    \}\
    \
    TrieNode* getLink(int bit)\{\
        return links[bit];\
    \}\
\};\
\
class Trie\{\
private: TrieNode* root;\
        \
public:\
    Trie()\{\
        root = new TrieNode();\
    \}    \
    \
    void insert(int num)\{\
        TrieNode *node = root;\
        for(int i = 31; i >= 0; i--)\{\
            int bit = (num >> i) & 1;\
            if(!node->containsLink(bit))\{\
                node->createLink(bit);\
            \}\
            node = node->getLink(bit);\
        \}\
    \}\
    \
    int maxVal(int num)\{\
        TrieNode *node = root;\
        int maxVal = 0;\
        \
        for(int i = 31; i >= 0; i--)\{\
            int bit = (num >> i) & 1;\
            if(node->containsLink(1 - bit))\{\
                maxVal = maxVal | (1 << i);\
                node = node->getLink(1 - bit);\
            \}\
            else\{\
                node = node->getLink(bit);\
            \}\
        \}\
        \
        return maxVal ;\
    \}    \
\};\
\
int maxXOR(int n, int m, vector<int> &arr1, vector<int> &arr2) \{\
    Trie* obj = new Trie();\
    int maxAns = 0;\
    \
    for (int i = 0; i < n; ++i)\{\
        obj->insert(arr1[i]);\
    \}\
    \
    for (int i = 0; i < m; ++i)\{\
        int curr = obj->maxVal(arr2[i]);\
        maxAns = max(maxAns, curr);\
    \}\
    \
    return maxAns;\
\}\
}