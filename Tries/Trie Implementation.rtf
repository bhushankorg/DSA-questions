{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include<bits/stdc++.h>\
/*\
    Your Trie object will be instantiated and called as such:\
    Trie* obj = new Trie();\
    obj->insert(word);\
    bool check2 = obj->search(word);\
    bool check3 = obj->startsWith(prefix);\
 */\
struct Node\{\
    Node *links[26];\
    bool flag = false;\
    \
    //to check if that character is present in trie\
    bool containsLink(char ch)\{\
        return (links[ch - 'a'] != NULL);\
    \}\
    //to put charcter in trie\
    void putNode(char ch, Node* node)\{\
        links[ch - 'a'] = node;\
    \}\
    //to get the address of next trie\
    Node* getNode(char ch)\{\
        return links[ch - 'a'];\
    \}\
    //set an true to recognize that word is at end\
    void setEnd()\{\
        flag = true;\
    \}\
    //tells if we are at the end of word or not\
    bool isEnd() \{\
        return flag;\
    \}\
\};\
\
class Trie \{\
private: Node* root;\
public:\
    /** Initialize your data structure here. */\
    Trie() \{\
        root = new Node();\
    \}\
    /** Inserts a word into the trie. */\
    void insert(string word) \{\
        Node* node = root;        \
        for(int i = 0; i < word.length(); i++)\{\
            if(!node->containsLink(word[i]))\{\
                node->putNode(word[i], new Node());\
            \}\
            //moves to reference trie to ch\
            node = node->getNode(word[i]);\
        \}\
        //set an true at the end of word insertion\
        node->setEnd();\
    \}\
\
    /** Returns if the word is in the trie. */\
    bool search(string word) \{\
        Node* node = root;\
        for(int i = 0; i < word.length(); i++)\{\
            if(!node->containsLink(word[i])) return false;\
            node = node->getNode(word[i]);\
        \}\
        return node->isEnd();\
    \}\
\
    /** Returns if there is any word in the trie that starts with the given prefix. */\
    bool startsWith(string prefix) \{\
        Node* node = root;\
        for(int i = 0; i < prefix.length(); i++)\{\
            if(!node->containsLink(prefix[i])) return false;\
            node = node->getNode(prefix[i]);\
        \}\
        return true;\
    \}\
\};}