{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <bits/stdc++.h> \
struct TrieNode\{\
    TrieNode* links[26];\
    int prefix = 0;\
    int end = 0;\
    \
    bool containsLink(char ch)\{\
        return (links[ch - 'a'] != NULL);\
    \}\
    \
    void createLink(char ch, TrieNode* node)\{\
        links[ch - 'a'] = node;\
    \}\
    \
    TrieNode* getLink(char ch)\{\
        return links[ch - 'a'];\
    \}\
    \
    void addPrefix()\{\
        prefix++;\
    \}\
    \
    void addEnd()\{\
        end++;\
    \}\
    \
    int countPrefix()\{\
        return prefix;\
    \}\
    \
    int countEnd()\{\
        return end;\
    \}\
    \
    void removePrefix()\{\
        prefix--;\
    \}\
    \
    void removeEnd()\{\
        end--;\
    \}\
\};\
class Trie\{\
    private:\
        TrieNode* root;\
    public:\
\
    Trie()\{\
        // Write your code here.\
        root = new TrieNode();\
    \}\
\
    void insert(string &word)\{\
        // Write your code here.\
        TrieNode* node = root;\
        for(char ch : word)\{\
            if(!node->containsLink(ch))\{\
                node->createLink(ch, new TrieNode());\
            \}\
            node = node->getLink(ch);\
            node->addPrefix();\
        \}\
        node->addEnd();\
    \}\
\
    int countWordsEqualTo(string &word)\{\
        // Write your code here.\
        TrieNode* node = root;\
        for(char ch : word)\{\
            if(!node->containsLink(ch))\{\
                return 0;\
            \}\
            node = node->getLink(ch);\
        \}\
        return node->countEnd();\
    \}\
\
    int countWordsStartingWith(string &word)\{\
        // Write your code here.\
        TrieNode* node = root;\
        for(char ch : word)\{\
            if(!node->containsLink(ch))\{\
                return 0;\
            \}\
            node = node->getLink(ch);\
        \}\
        return node->countPrefix();\
    \}\
\
    void erase(string &word)\{\
        // Write your code here.\
        TrieNode* node = root;\
        for(char ch : word)\{\
            if(!node->containsLink(ch))\{\
                return;\
            \}\
            node = node->getLink(ch);\
            node->removePrefix();\
        \}\
        node->removeEnd();\
    \}\
\};\
}