int widthOfBinaryTree(TreeNode* root) {
        if(root == NULL) return 0;

        queue<pair<TreeNode*, ll>> q;
        q.push({root, 0});

        int maxWidth = 0;
	//Make a Level order traversal
        while(!q.empty()){
            int size = q.size();
            int mini = q.front().second;	//store minimum element to reset range in 1 based index
            ll start, end;
            for(int i = 0; i < size; i++){
                TreeNode* node = q.front().first;
                ll curr = q.front().second - mini;    	  //reset range in 1 based index       
                q.pop();	

                if(i == 0) start = curr;		//store first and last element
                if(i == size - 1) end = curr;

                if(node->left) q.push({node->left, curr*2 + 1});	//store children with their node number
                if(node->right) q.push({node->right, curr*2 + 2});
            }
            maxWidth = max(maxWidth, (int)(end - start + 1));	//update maxWidth
        }

        return maxWidth;
    }