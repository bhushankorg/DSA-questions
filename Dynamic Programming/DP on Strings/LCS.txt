//Memorization
int findMaxLen(int ind1, int ind2, string text1, string text2, vector<vector<int>>&dp) {
       if(ind1 < 0 || ind2 < 0) return 0;
        
       if(dp[ind1][ind2] != -1) return dp[ind1][ind2];

       if(text1[ind1] == text2[ind2]) 
            return dp[ind1][ind2] = 1 + findMaxLen(ind1-1, ind2-1, text1, text2, dp);

       return dp[ind1][ind2] = max(findMaxLen(ind1-1, ind2, text1, text2, dp), 
         findMaxLen(ind1, ind2-1, text1, text2, dp));
}


//Tabulation
int longestComSunSeq(string word1, string word2) {
	int row = word1.length(), col = word2.length();
	string str = "";
	vector<vector<int>>dp(row + 1, vector<int>(col + 1, 0));

	for (int i = 1; i < row + 1; i++)	{
		for (int j = 1; j < col + 1; j++)	{
			if (word1[i - 1] == word2[j - 1])
				dp[i][j] = 1 + dp[i - 1][j - 1];
			else
				dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
		}
	}

	return dp[row][col];
}