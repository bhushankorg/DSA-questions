#include<bits/stdc++.h>
int minOperations(int i, int j, string &str1, string &str2, vector<vector<int>>&dp){
    if(i < 0) return j + 1;
    if(j < 0) return i + 1;
    
    if(dp[i][j] != -1) return dp[i][j];
        
    if(str1[i] == str2[j]) 
        return dp[i][j] = minOperations(i - 1, j - 1, str1, str2, dp);
    
    int insert = 1 +  minOperations(i, j - 1, str1, str2, dp);
    int delet  = 1 + minOperations(i - 1, j, str1, str2, dp);
    int update = 1 + minOperations(i - 1, j - 1, str1, str2, dp);
    
    return dp[i][j] = min(insert, min(delet, update));
}

int tabulation(string &str1, string &str2){
    int m = str1.length(), n = str2.length();
    vector<vector<int>>dp(m+1, vector<int>(n+1, 0));
    
    for(int i = 0; i < m + 1; i++) dp[i][0] = i;
    for(int j = 0; j < n + 1; j++) dp[0][j] = j;
        
    for(int i = 1; i < m + 1; i++){
        for(int j = 1; j < n + 1; j++)
        {
            if(str1[i - 1] == str2[j - 1]) 
                dp[i][j] = dp[i - 1][j  - 1];
            else{
                int insert = 1 +  dp[i][j - 1];
                int delet  = 1 + dp[i - 1][j];
                int update = 1 + dp[i - 1][j - 1];
                dp[i][j] = min(insert, min(delet, update));
            }
        }
    }
    return dp[m][n];
}

int editDistance(string str1, string str2)
{
    //write you code here
//     int m = str1.length(), n = str2.length();
//     vector<vector<int>>dp(m, vector<int>(n, -1));
//     return minOperations(m - 1, n - 1, str1, str2, dp);
    int m = str1.length(), n = str2.length();
    vector<vector<int>>dp(m+1, vector<int>(n+1, 0));
    for(int i = 1; i < m + 1; i++) dp[i][0] = i;
    for(int j = 1; j < n + 1; j++) dp[0][j] = j;
    
    for(int i = 1; i < m + 1; i++){
        for(int j = 1; j < n + 1; j++){
            if(str1[i - 1] == str2[j - 1]) 
                dp[i][j] = dp[i - 1][j  - 1];
            else{
                int insert = 1 +  dp[i][j - 1];
                int delet  = 1 + dp[i - 1][j];
                int update = 1 + dp[i - 1][j - 1];
                dp[i][j] = min(insert, min(delet, update));
            }
        }
    }
    return dp[m][n];
}