#include <bits/stdc++.h>
using namespace std;
#define INT_MIN_VALUE -2147483648
#define INT_MAX_VALUE 2147483647

//Memorization TC - O(N*N) + O(N) 		SC - O(N*N)
int findLen(int ind, int prev_ind, vector<int> &nums, vector<vector<int>> &dp) {
	if (ind == nums.size()) return 0;

	if (dp[ind][prev_ind + 1] != -1) return dp[ind][prev_ind + 1];

	int take = 0;
	if (prev_ind == -1 || nums[prev_ind] < nums[ind]) {
		take = 1 + findLen(ind + 1, ind, nums, dp);
	}

	int notTake = 0 + findLen(ind + 1, prev_ind, nums, dp);

	return dp[ind][prev_ind + 1] = max(take, notTake);
}

//Tabulation TC - O(N*N)				SC - O(N*N)
int tabulation(int n, vector<int>&nums) {
	vector<vector<int>>dp(n + 1, vector<int>(n + 1, 0));

	for (int ind = n - 1; ind >= 0; ind--)	{
		for (int prev_ind = ind - 1; prev_ind >= -1; prev_ind--)	{
			int take = 0;
			if (prev_ind == -1 || nums[prev_ind] < nums[ind]) {
				take = 1 + dp[ind + 1][ind + 1];
			}

			int notTake = 0 + dp[ind + 1][prev_ind + 1];

			dp[ind][prev_ind + 1] = max(take, notTake);
		}
	}

	return dp[0][0];
}
//Tabulation TC - O(N*N)				SC - O(N)
int spaceOptimization(int n, vector<int>&nums) {
	vector<int> next(n + 1, 0), curr(n + 1, 0);

	for (int ind = n - 1; ind >= 0; ind--)	{
		for (int prev_ind = ind - 1; prev_ind >= -1; prev_ind--)	{
			int take = 0;
			if (prev_ind == -1 || nums[prev_ind] < nums[ind]) {
				take = 1 + next[ind + 1];
			}

			int notTake = 0 + next[prev_ind + 1];

			curr[prev_ind + 1] = max(take, notTake);
		}
		next = curr;
	}

	return next[0];
}

//
int backTracking(int n, vector<int>&nums) {
	vector<int> dp(n + 1, 1);
	vector<int> elements(n + 1, -1);

	int maxi = 0, lastInd = 0;
	for (int i = 0; i < n; i++)	{
		for (int prev = 0; prev < i; prev++)	{
			if (nums[prev] < nums[i] && dp[i] < dp[prev] + 1) {
				dp[i] = dp[prev] + 1;
				elements[i] = prev;
			}
		}
		if (maxi < dp[i]) {
			maxi = dp[i];
			lastInd = i;
		}
	}
	//printing elements of LIS
	int ind = lastInd;
	while (ind != -1) {
		cout << nums[ind] << " ";
		ind = elements[ind];
	}
	
	cout << endl;
	return 11;
}

int longestIncreasingSubsq(int n, vector<int>&nums) {
	vector<vector<int>>dp(n + 1, vector<int>(n + 1, -1));
	return findLen(0, -1, nums, dp);
}

int main() {
	int n;
	cin >> n;

	vector<int>arr(n);
	for (int i = 0; i < n; i++) cin >> arr[i];

	cout << backTracking(n, arr);

	return 0;
}